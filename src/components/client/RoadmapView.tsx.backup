import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Button } from '@/components/ui/button';
import { Route, CheckCircle2, Clock, Circle, Calendar, FileText, Image, Video, Download, ExternalLink, ChevronDown, ChevronUp } from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';

interface RoadmapItem {
  id: string;
  project_id: string;
  title: string;
  description?: string;
  status: 'NOT_STARTED' | 'IN_PROGRESS' | 'DONE';
  effort: number;
  start_date?: string;
  end_date?: string;
  dependency_ids: string[];
  order_index: number;
  created_at: string;
  updated_at: string;
}

interface Sprint {
  id: string;
  sprint_number: number;
  week_start_date: string;
  week_end_date: string;
  status: 'PLANNED' | 'IN_PROGRESS' | 'DONE';
  planned_scope: any;
  actual_delivered?: any;
  notes?: string;
  created_at: string;
  updated_at: string;
  project_id: string;
}

interface Report {
  id: string;
  title: string;
  content_md: string;
  created_at: string;
  sprint_id: string | null;
  is_published: boolean;
  version?: number | null;
  published_at: string | null;
  sprints?: { sprint_number: number } | null;
}

interface Evidence {
  id: string;
  report_id: string;
  type: 'IMAGE' | 'VIDEO';
  storage_key: string;
  url: string;
  thumbnail_url?: string;
  mime_type?: string;
  size_bytes?: number;
  uploaded_by: string;
  created_at: string;
}

interface SprintWithContent extends Sprint {
  reports: Report[];
  evidences: Evidence[];
  expanded: boolean;
}

interface RoadmapItemWithDetails extends RoadmapItem {
  sprints: SprintWithContent[];
  expanded: boolean;
}

interface RoadmapViewProps {
  projectId: string;
}

export const RoadmapView = ({ projectId }: RoadmapViewProps) => {
  const [roadmapItems, setRoadmapItems] = useState<RoadmapItemWithDetails[]>([]);
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState({
    total: 0,
    completed: 0,
    inProgress: 0,
    notStarted: 0,
    progress: 0
  });
  const [selectedReport, setSelectedReport] = useState<Report | null>(null);
  const [reportModalOpen, setReportModalOpen] = useState(false);

  const toggleSprintExpanded = useCallback((roadmapItemId: string, sprintId: string) => {
    setRoadmapItems(prev => prev.map(item => 
      item.id === roadmapItemId 
        ? {
            ...item,
            sprints: item.sprints.map(sprint => 
              sprint.id === sprintId 
                ? { ...sprint, expanded: !sprint.expanded }
                : sprint
            )
          }
        : item
    ));
  }, []);

  const toggleExpanded = useCallback((roadmapItemId: string) => {
    setRoadmapItems(prev => prev.map(item => 
      item.id === roadmapItemId 
        ? { ...item, expanded: !item.expanded }
        : item
    ));
  }, []);

  const openReport = (report: Report) => {
    setSelectedReport(report);
    setReportModalOpen(true);
  };

  const getFileIcon = (type: 'IMAGE' | 'VIDEO') => {
    if (type === 'IMAGE') {
      return <Image className="w-4 h-4 text-blue-500" />;
    } else if (type === 'VIDEO') {
      return <Video className="w-4 h-4 text-purple-500" />;
    } else {
      return <FileText className="w-4 h-4 text-gray-500" />;
    }
  };

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return '';
    
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  useEffect(() => {
    const fetchRoadmapWithDetails = async () => {
      try {
        // Buscar roadmap items
        const { data: roadmapData, error: roadmapError } = await supabase
          .from('roadmap_items')
          .select('*')
          .eq('project_id', projectId)
          .order('order_index', { ascending: true });

        if (roadmapError) throw roadmapError;

        // Buscar todas as sprints do projeto
        const { data: sprintsData, error: sprintsError } = await supabase
          .from('sprints')
          .select('*')
          .eq('project_id', projectId)
          .order('sprint_number', { ascending: false });

        if (sprintsError) throw sprintsError;

        // Buscar todos os relatórios publicados
        const { data: reportsData, error: reportsError } = await supabase
          .from('reports')
          .select(`
            id,
            title,
            content_md,
            created_at,
            sprint_id,
            is_published,
            version,
            published_at,
            sprints(sprint_number)
          `)
          .eq('project_id', projectId)
          .eq('is_published', true)
          .order('created_at', { ascending: false });

        if (reportsError) throw reportsError;

        // Buscar todas as evidências
        const { data: evidencesData, error: evidencesError } = await supabase
          .from('evidences')
          .select('*')
          .in('report_id', reportsData?.map(r => r.id) || [])
          .order('created_at', { ascending: false });

        if (evidencesError) throw evidencesError;

        // Combinar os dados
        const roadmapItemsWithDetails: RoadmapItemWithDetails[] = (roadmapData || []).map(item => {
          // Encontrar sprints relacionadas ao item do roadmap
          // Por enquanto, vamos associar baseado na proximidade das datas
          const relatedSprints = (sprintsData || []).filter(sprint => {
            if (!item.start_date || !item.end_date) return false;
            
            const itemStart = new Date(item.start_date);
            const itemEnd = new Date(item.end_date);
            const sprintStart = new Date(sprint.week_start_date);
            const sprintEnd = new Date(sprint.week_end_date);
            
            // Verificar se há sobreposição entre as datas
            return itemStart <= sprintEnd && itemEnd >= sprintStart;
          });

          // Para cada sprint relacionada, associar seus relatórios e evidências
          const sprintsWithContent: SprintWithContent[] = relatedSprints.map(sprint => {
            const sprintReports = (reportsData || []).filter(report => report.sprint_id === sprint.id);
            const reportIds = sprintReports.map(r => r.id);
            const sprintEvidences = (evidencesData || []).filter(evidence => 
              reportIds.includes(evidence.report_id)
            );

            return {
              ...sprint,
              reports: sprintReports,
              evidences: sprintEvidences,
              expanded: false
            };
          });

          return {
            ...item,
            sprints: sprintsWithContent,
            expanded: false
          };
        });

        setRoadmapItems(roadmapItemsWithDetails);

        // Calculate statistics
        const completed = roadmapItemsWithDetails.filter(item => item.status === 'DONE').length;
        const inProgress = roadmapItemsWithDetails.filter(item => item.status === 'IN_PROGRESS').length;
        const notStarted = roadmapItemsWithDetails.filter(item => item.status === 'NOT_STARTED').length;
        const total = roadmapItemsWithDetails.length;
        const progress = total > 0 ? Math.round((completed / total) * 100) : 0;

        setStats({
          total,
          completed,
          inProgress,
          notStarted,
          progress
        });
      } catch (error) {
        console.error('Erro ao buscar roadmap com detalhes:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchRoadmapWithDetails();
  }, [projectId]);

  const getStatusBadge = (status: RoadmapItem['status']) => {
    switch (status) {
      case 'DONE':
        return <Badge className="bg-green-500 hover:bg-green-600"><CheckCircle2 className="w-3 h-3 mr-1" />Concluído</Badge>;
      case 'IN_PROGRESS':
        return <Badge className="bg-blue-500 hover:bg-blue-600"><Clock className="w-3 h-3 mr-1" />Em Progresso</Badge>;
      case 'NOT_STARTED':
        return <Badge variant="outline"><Circle className="w-3 h-3 mr-1" />Não Iniciado</Badge>;
      default:
        return <Badge variant="outline">-</Badge>;
    }
  };

  const getSprintStatusBadge = (status: Sprint['status']) => {
    switch (status) {
      case 'DONE':
        return <Badge className="bg-green-500 hover:bg-green-600"><CheckCircle2 className="w-3 h-3 mr-1" />Concluída</Badge>;
      case 'IN_PROGRESS':
        return <Badge className="bg-blue-500 hover:bg-blue-600"><Clock className="w-3 h-3 mr-1" />Em Progresso</Badge>;
      case 'PLANNED':
        return <Badge variant="outline"><Circle className="w-3 h-3 mr-1" />Planejada</Badge>;
      default:
        return <Badge variant="outline">-</Badge>;
    }
  };

  const getEffortBadge = (effort: number) => {
    if (effort <= 3) return <Badge variant="outline">Baixo ({effort})</Badge>;
    if (effort <= 7) return <Badge variant="secondary">Médio ({effort})</Badge>;
    return <Badge variant="destructive">Alto ({effort})</Badge>;
  };

  if (loading) {
    return (
      <div className="space-y-4">
        <div className="animate-pulse">
          <div className="h-4 bg-muted rounded w-1/4 mb-4"></div>
          <div className="space-y-3">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="h-32 bg-muted rounded"></div>
            ))}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-2xl font-bold mb-2">Roadmap do Projeto</h3>
        <p className="text-muted-foreground">
          Planejamento detalhado das funcionalidades e marcos do projeto.
        </p>
      </div>

      {/* Progress Overview */}
      <Card className="bg-card/80 backdrop-blur-sm border-border/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Route className="w-5 h-5" />
            Progresso Geral
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Conclusão</span>
            <span className="text-2xl font-bold">{stats.progress}%</span>
          </div>
          <Progress value={stats.progress} className="h-2" />
          <div className="grid grid-cols-3 gap-4 text-center text-sm">
            <div>
              <div className="font-semibold text-lg">{stats.completed}</div>
              <div className="text-muted-foreground">Concluído</div>
            </div>
            <div>
              <div className="font-semibold text-lg">{stats.inProgress}</div>
              <div className="text-muted-foreground">Em Progresso</div>
            </div>
            <div>
              <div className="font-semibold text-lg">{stats.notStarted}</div>
              <div className="text-muted-foreground">Não Iniciado</div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Roadmap Items */}
      {roadmapItems.length === 0 ? (
        <Card className="bg-card/80 backdrop-blur-sm border-border/50">
          <CardContent className="p-8 text-center">
            <Route className="w-16 h-16 text-muted-foreground mx-auto mb-4" />
            <h4 className="text-lg font-medium mb-2">Roadmap não definido ainda</h4>
            <p className="text-muted-foreground text-sm">
              O planejamento detalhado aparecerá aqui conforme o projeto evoluir.
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-4">
          {roadmapItems.map((item, index) => (
            <Card key={item.id} className="bg-card/80 backdrop-blur-sm border-border/50">
              <CardHeader>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <span className="text-sm font-mono text-muted-foreground">#{index + 1}</span>
                      <CardTitle className="text-lg">{item.title}</CardTitle>
                    </div>
                    {item.description && (
                      <p className="text-sm text-muted-foreground">{item.description}</p>
                    )}
                  </div>
                  <div className="flex flex-col gap-2 items-end">
                    <div className="flex gap-2">
                      {getStatusBadge(item.status)}
                      {getEffortBadge(item.effort)}
                    </div>
                    {(item.sprints.length > 0 || item.reports.length > 0 || item.evidences.length > 0) && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => toggleExpanded(item.id)}
                        className="text-xs"
                      >
                        {item.expanded ? (
                          <>
                            <ChevronUp className="w-3 h-3 mr-1" />
                            Recolher
                          </>
                        ) : (
                          <>
                            <ChevronDown className="w-3 h-3 mr-1" />
                            Detalhes ({item.sprints.length} sprint{item.sprints.length !== 1 ? 's' : ''})
                          </>
                        )}
                      </Button>
                    )}
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4 text-sm mb-4">
                  <div>
                    <span className="text-muted-foreground">Esforço:</span>
                    <div className="font-medium">{item.effort} ponto{item.effort > 1 ? 's' : ''}</div>
                  </div>
                  {item.start_date && (
                    <div>
                      <span className="text-muted-foreground">Início:</span>
                      <div className="font-medium flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        {new Date(item.start_date).toLocaleDateString('pt-BR')}
                      </div>
                    </div>
                  )}
                  {item.end_date && (
                    <div>
                      <span className="text-muted-foreground">Fim:</span>
                      <div className="font-medium flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        {new Date(item.end_date).toLocaleDateString('pt-BR')}
                      </div>
                    </div>
                  )}
                </div>

                {/* Conteúdo expandido */}
                {item.expanded && (
                  <div className="border-t pt-4 space-y-6">
                    {/* Sprints relacionadas */}
                    {item.sprints.length > 0 && (
                      <div>
                        <h4 className="font-medium mb-4 flex items-center gap-2">
                          <Calendar className="w-4 h-4" />
                          Sprints Relacionadas ({item.sprints.length})
                        </h4>
                        <div className="space-y-4">
                          {item.sprints.map((sprint) => (
                            <Card key={sprint.id} className="bg-muted/30 border-l-4 border-l-primary">
                              <CardHeader className="pb-3">
                                <div className="flex items-center justify-between">
                                  <div className="flex items-center gap-3">
                                    <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary/10">
                                      <span className="text-sm font-bold text-primary">
                                        {sprint.sprint_number}
                                      </span>
                                    </div>
                                    <div>
                                      <CardTitle className="text-base">Sprint {sprint.sprint_number}</CardTitle>
                                      <div className="text-sm text-muted-foreground flex items-center gap-2">
                                        <Calendar className="w-3 h-3" />
                                        {new Date(sprint.week_start_date).toLocaleDateString('pt-BR')} - {' '}
                                        {new Date(sprint.week_end_date).toLocaleDateString('pt-BR')}
                                      </div>
                                    </div>
                                  </div>
                                  <div className="flex items-center gap-2">
                                    {getSprintStatusBadge(sprint.status)}
                                    {(sprint.reports.length > 0 || sprint.evidences.length > 0) && (
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => toggleSprintExpanded(item.id, sprint.id)}
                                        className="text-xs"
                                      >
                                        {sprint.expanded ? (
                                          <>
                                            <ChevronUp className="w-3 h-3 mr-1" />
                                            Recolher
                                          </>
                                        ) : (
                                          <>
                                            <ChevronDown className="w-3 h-3 mr-1" />
                                            Conteúdo ({sprint.reports.length} relatório{sprint.reports.length !== 1 ? 's' : ''}, {sprint.evidences.length} evidência{sprint.evidences.length !== 1 ? 's' : ''})
                                          </>
                                        )}
                                      </Button>
                                    )}
                                  </div>
                                </div>
                              </CardHeader>

                              {/* Escopo Planejado */}
                              {sprint.planned_scope && (
                                <CardContent className="pt-0">
                                  <div className="mb-4">
                                    <h5 className="font-medium mb-2 text-sm">Escopo Planejado:</h5>
                                    <div className="text-sm text-muted-foreground bg-muted/50 p-3 rounded">
                                      {Array.isArray(sprint.planned_scope?.tasks) ? (
                                        <ul className="list-disc list-inside space-y-1">
                                          {sprint.planned_scope.tasks.map((task: string, index: number) => (
                                            <li key={index}>{task}</li>
                                          ))}
                                        </ul>
                                      ) : (
                                        <p>Escopo não definido</p>
                                      )}
                                    </div>
                                  </div>
                                </CardContent>
                              )}

                              {/* Conteúdo da Sprint (expandido) */}
                              {sprint.expanded && (
                                <CardContent className="pt-0 border-t">
                                  <div className="space-y-4 pt-4">
                                    {/* Relatórios da Sprint */}
                                    {sprint.reports.length > 0 && (
                                      <div>
                                        <h5 className="font-medium mb-3 flex items-center gap-2 text-sm">
                                          <FileText className="w-4 h-4" />
                                          Relatórios ({sprint.reports.length})
                                        </h5>
                                        <div className="space-y-3">
                                          {sprint.reports.map((report) => (
                                            <Card key={report.id} className="bg-background/50">
                                              <CardContent className="p-4">
                                                <div className="flex items-start justify-between mb-2">
                                                  <div className="flex-1">
                                                    <h6 className="font-medium text-sm">{report.title}</h6>
                                                    <div className="text-xs text-muted-foreground mt-1">
                                                      {new Date(report.created_at).toLocaleDateString('pt-BR')}
                                                      {report.version && ` • v${report.version}`}
                                                    </div>
                                                  </div>
                                                  <Button
                                                    variant="outline"
                                                    size="sm"
                                                    onClick={() => openReport(report)}
                                                    className="text-xs"
                                                  >
                                                    <ExternalLink className="w-3 h-3 mr-1" />
                                                    Ver
                                                  </Button>
                                                </div>
                                                {report.content_md && (
                                                  <div className="text-xs text-muted-foreground line-clamp-2 mt-2">
                                                    {report.content_md.replace(/[#*`]/g, '').substring(0, 150)}...
                                                  </div>
                                                )}
                                              </CardContent>
                                            </Card>
                                          ))}
                                        </div>
                                      </div>
                                    )}

                                    {/* Evidências da Sprint */}
                                    {sprint.evidences.length > 0 && (
                                      <div>
                                        <h5 className="font-medium mb-3 flex items-center gap-2 text-sm">
                                          <Image className="w-4 h-4" />
                                          Evidências ({sprint.evidences.length})
                                        </h5>
                                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                                          {sprint.evidences.map((evidence) => (
                                            <Card key={evidence.id} className="bg-background/50">
                                              <CardContent className="p-3">
                                                <div className="flex items-center gap-2 mb-2">
                                                  {getFileIcon(evidence.type)}
                                                  <span className="text-xs font-medium">
                                                    {evidence.type === 'IMAGE' ? 'Imagem' : 'Vídeo'}
                                                  </span>
                                                </div>
                                                {evidence.thumbnail_url && (
                                                  <div className="mb-2">
                                                    <img 
                                                      src={evidence.thumbnail_url} 
                                                      alt="Thumbnail" 
                                                      className="w-full h-16 object-cover rounded cursor-pointer"
                                                      onClick={() => window.open(evidence.url, '_blank')}
                                                    />
                                                  </div>
                                                )}
                                                <div className="flex items-center justify-between">
                                                  <span className="text-xs text-muted-foreground">
                                                    {formatFileSize(evidence.size_bytes)}
                                                  </span>
                                                  <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => window.open(evidence.url, '_blank')}
                                                    className="h-6 w-6 p-0"
                                                  >
                                                    <Download className="w-3 h-3" />
                                                  </Button>
                                                </div>
                                              </CardContent>
                                            </Card>
                                          ))}
                                        </div>
                                      </div>
                                    )}

                                    {/* Mensagem quando não há conteúdo */}
                                    {sprint.reports.length === 0 && sprint.evidences.length === 0 && (
                                      <div className="text-center py-4 text-muted-foreground bg-muted/30 rounded">
                                        <FileText className="w-6 h-6 mx-auto mb-2 opacity-50" />
                                        <p className="text-xs">Nenhum relatório ou evidência nesta sprint ainda.</p>
                                      </div>
                                    )}
                                  </div>
                                </CardContent>
                              )}
                            </Card>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Mensagem quando não há sprints relacionadas */}
                    {item.sprints.length === 0 && (
                      <div className="text-center py-6 text-muted-foreground">
                        <Calendar className="w-8 h-8 mx-auto mb-2 opacity-50" />
                        <p className="text-sm">Nenhuma sprint relacionada encontrada para este período.</p>
                      </div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {/* Modal do Relatório */}
      <Dialog open={reportModalOpen} onOpenChange={setReportModalOpen}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{selectedReport?.title}</DialogTitle>
            <DialogDescription>
              Sprint {selectedReport?.sprints?.sprint_number} • 
              Publicado em {selectedReport?.published_at ? new Date(selectedReport.published_at).toLocaleDateString('pt-BR') : 'N/A'}
            </DialogDescription>
          </DialogHeader>
          <div className="mt-4">
            {selectedReport?.content_md && (
              <div className="prose prose-sm max-w-none dark:prose-invert">
                <div dangerouslySetInnerHTML={{ __html: selectedReport.content_md.replace(/\n/g, '<br>') }} />
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};